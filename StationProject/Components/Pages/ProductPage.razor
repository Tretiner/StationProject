@page "/Product/{productId?}"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using StationProject.Data
@using StationProject.Data.Models
@using StationProject.Domain
@using StationProject.Services

@inject ApplicationDbContext _db
@inject CartService _cartService;
@inject AppNavigationManager _nav;
@inject AuthenticationStateProvider authStateProvider;

@attribute [Authorize]

@if (productId is null)
{
    <span>Product is loading</span>
}
else if (Item is null)
{
    <span>Product is not found</span>
}
else
{
    <div class="f-row" style="padding: 20px 60px; gap: 40px">
        <div class="f-column gap-20">
            <img src="@Item.FirstImageOrPlaceholderUrl()" style="width: 500px; height: 500px"/>

            <div style="height: 1px; background-color: #E8ECF2;"></div>

            <div class="fw-row space-between" style="flex: 1;">
                @foreach (var imgUrl in Item.ImageUrls.Skip(1).Take(4))
                {
                    <img src="@imgUrl" style="width: 100px; height: 100px"/>
                }
            </div>
        </div>

        <div class="f-column gap-10" style="padding: 10px 20px; width: 100%">
            <span style="font-size: 32px;">@Item.Name</span>

            <div class="fw-row space-between" style="align-content: center; align-items: center">
                <span style="font-weight: bold; font-size: 40px">@Item.Price</span>

                <button class="outlined" @onclick="() => AddOrIncrementToCart(Item.Id)">Добавить в корзину</button>
            </div>


            <div class="f-row gap-20">
                <button class="tab-button @GetSelectedButtonStyle(ProductTab.Desc)" @onclick="() => SelectTab(ProductTab.Desc)">Описание</button>
                <button class="tab-button @GetSelectedButtonStyle(ProductTab.Char)" @onclick="() => SelectTab(ProductTab.Char)">Характеристики</button>
            </div>

            <div style="height: 1px; background-color: #E8ECF2"></div>

            <span style="white-space: pre-line; font-size: 24px; font-weight: 300">
                @if (SelectedTab == ProductTab.Desc)
                {
                    @((MarkupString)Item.Description)
                }
                else
                {
                    @((MarkupString)Item.Characteristics)
                }
            </span>
        </div>
    </div>
}

@code {

    public string GetSelectedButtonStyle(ProductTab tab) =>
        tab == SelectedTab ? "tab-button-selected" : "";

    public ProductTab SelectedTab { get; set; } = ProductTab.Desc;

    public void SelectTab(ProductTab tab)
    {
        SelectedTab = tab;
    }

    [Parameter]
    public string? productId { get; set; }

    public int ProductId => productId is not null ? int.Parse(productId) : 0;

    public ProductInfo? Item { get; set; }

    public enum ProductTab
    {
        Desc,
        Char
    }

    private async Task AddOrIncrementToCart(int productId)
    {
        await _cartService.AddOrIncrementProduct(await authStateProvider.GetAuthenticationStateAsync().GetUserIdAsync() ?? 0, productId);
        _nav.NavigateToCart();
    }

    protected override async Task OnInitializedAsync()
    {
        var product = await _db.Products
            .Include(x => x.Vendor)
            .Include(x => x.Category)
            .Include(x => x.Images)
            .Include(x => x.Price).ThenInclude(x => x.Template)
            .FirstOrDefaultAsync(x => x.Id == ProductId);

        if (product is not null)
        {
            Item = Map(product);
        }
    }

    private static ProductInfo Map(Product product) => new()
    {
        Id = product.Id,
        ImageUrls = product.Images.Select(x => x.Url).ToArray(),
        Name = product.Name,
        Description = product.Description,
        Characteristics = product.Characteristics,
        VendorName = product.Vendor.UserName,
        Price = product.Price.FormattedPrice,
        IsAddedToCart = false,
    };

}