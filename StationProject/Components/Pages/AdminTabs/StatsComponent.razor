@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using StationProject.Data

@inject ApplicationDbContext _db;

<RadzenStack >
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" Component="smooth"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" Component="dataLabels"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@showMarkers" Name="markers"></RadzenCheckBox>
                <RadzenLabel Text="Show Markers" Component="markers"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@sharedTooltip" Name="sharedToltip"></RadzenCheckBox>
                <RadzenLabel Text="Shared Tooltip" Component="sharedTooltip"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenChart>
        <RadzenChartTooltipOptions Shared="@sharedTooltip"/>
        @if (ActualMonths.Count > 0)
        {
            <RadzenLineSeries Smooth="@smooth" Data="@ActualMonths" CategoryProperty="@nameof(MonthViews.Month)" Title="Актуальные просмотры" ValueProperty="@nameof(MonthViews.Views)">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle"/>
                <RadzenSeriesDataLabels Visible="@showDataLabels"/>
            </RadzenLineSeries>
        }
        @if (MaybeMonths.Count > 0)
        {
            <RadzenLineSeries Smooth="@smooth" Data="@MaybeMonths" CategoryProperty="@nameof(MonthViews.Month)" Title="Прогнозируемые просмотры" LineType="LineType.Dashed" ValueProperty="@nameof(MonthViews.Views)">
                <RadzenMarkers Visible="@showMarkers" Fill="#E00000" MarkerType="MarkerType.Circle"/>
                <RadzenSeriesDataLabels Visible="@showDataLabels"/>
            </RadzenLineSeries>
        }
        <RadzenCategoryAxis Padding="20"/>
        <RadzenValueAxis >
            <RadzenGridLines Visible="true"/>
            <RadzenAxisTitle Text="Просмотры"/>
        </RadzenValueAxis>
    </RadzenChart>
</RadzenStack>

@code {
    bool smooth = false;
    bool sharedTooltip = true;
    bool showDataLabels = false;
    bool showMarkers = true;

    public List<MonthViews> ActualMonths { get; set; } = [];
    public List<MonthViews> MaybeMonths { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var m10ago = DateTimeOffset.UtcNow.AddMonths(-10);
        var monthStats = _db.UserActivityMonthStats.ToList()
            .Where(x => x.CreatedAt >= m10ago)
            .OrderBy(x => x.CreatedAt)
        ;

        ActualMonths = monthStats.Select(x => new MonthViews(
            Views: x.TotalSiteViews,
            Month: ToRuNormMonth(x.CreatedAt)
        )).ToList();

        if (ActualMonths.Count < 1)
        {
            return;
        }

        double totalGrowthRate = 0;
        int growthCount = 0;

        for (int i = 1; i < ActualMonths.Count; i++)
        {
            var previousMonthViews = ActualMonths[i - 1].Views;
            var currentMonthViews = ActualMonths[i].Views;

            if (previousMonthViews > 0)
            {
                double growthRate = (double)(currentMonthViews - previousMonthViews) / previousMonthViews;
                totalGrowthRate += growthRate;
                growthCount++;
            }
        }
     
        double averageGrowthRate = growthCount > 0 ? totalGrowthRate / growthCount : 0;

        var latestMonthView = ActualMonths.Last();

        MaybeMonths =
        [
            latestMonthView,
            new MonthViews(
                Views: (long)(latestMonthView.Views * (1 + averageGrowthRate)),
                Month: ToRuNormMonth(DateTime.UtcNow.AddMonths(1))
            ),

            new MonthViews(
                Views: (long)(latestMonthView.Views * Math.Pow(1 + averageGrowthRate, 2)),
                Month: ToRuNormMonth(DateTime.UtcNow.AddMonths(2))
            )
        ];
    }
/*
 *
 * function movingAverage(data, windowSize) {
  if (windowSize > data.length) {
    throw new Error("Window size must be less than or equal to the length of the data");
  }
  
  const movingAverages = [];
  for (let i = 0; i <= data.length - windowSize; i++) {
    const window = data.slice(i, i + windowSize);
    const avg = +(window.reduce((sum, val) => sum + val, 0) / windowSize).toFixed(2);
    console.log(`m = (${window.join(" + ")}) / ${windowSize} = ${avg}`);
    movingAverages.push(avg);
  }
  
  return movingAverages;
}

function calcNext(data, mdata, window) {
  const y = +(mdata[mdata.length - 1] + 1 / window * (data[data.length - 1] - data[data.length - 2])).toFixed(2);
  console.log(`y = ${mdata[mdata.length - 1]} + 1 / ${window} * (${data[data.length - 1]} - ${data[data.length - 2]}) = ${y}`);
  data.push(y);

  const newWindow = data.slice(-window);
  const m = +(newWindow.reduce((sum, val) => sum + val, 0) / window).toFixed(2);
  console.log(`m = (${newWindow.join(" + ")}) / ${window} = ${m}`);
  mdata.push(m);
}

// Исходные данные
let data = [78, 105, 175, 154, 173, 221, 258, 133, 95, 115];
let mdata = movingAverage(data, 3);

console.log("Data:", data);
console.log("Moving Averages:", mdata);

calcNext(data, mdata, 3);
calcNext(data, mdata, 3);

console.log("Updated Data:", data);
console.log("Updated Moving Averages:", mdata);

const rs = [];
for (let i = 1; i <= mdata.length; i++) {
  const diff = +(data[i] - mdata[i - 1]).toFixed(2);
  const squaredDiff = +(diff ** 2).toFixed(2);
  const relativeError = +(Math.abs(diff) / data[i]).toFixed(2);
  rs.push([diff, squaredDiff, relativeError]);
}

console.log("Results:");
console.log(rs.slice(0, -2).map(row => row.join(", ")).join("\n"));

let a = 0, b = 0, c = 0;
rs.forEach(([x, y, z]) => {
  a += x;
  b += y;
  c += z;
});

console.log(`Sum A: ${a}, Sum B: ${b}, Sum C: ${c}, Length: ${rs.length}`);
console.log(`Average A: ${(a / rs.length).toFixed(2)}, Average B: ${(b / rs.length).toFixed(2)}, Average C: ${(c / rs.length).toFixed(2)}`);

 */

    public static string ToRuNormMonth(DateTimeOffset? dateTime)
    {
        ArgumentNullException.ThrowIfNull(dateTime);
        return dateTime.Value.ToString("MMMM", new CultureInfo("ru-RU"));
    }

    public record MonthViews(
        long Views,
        string Month
    );

}