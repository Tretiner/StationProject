@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using StationProject.Data
@using StationProject.Services

@inject ApplicationDbContext _db;

<RadzenStack >
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" Component="smooth"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" Component="dataLabels"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@showMarkers" Name="markers"></RadzenCheckBox>
                <RadzenLabel Text="Show Markers" Component="markers"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@sharedTooltip" Name="sharedToltip"></RadzenCheckBox>
                <RadzenLabel Text="Shared Tooltip" Component="sharedTooltip"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenChart>
        <RadzenChartTooltipOptions Shared="@sharedTooltip"/>
        @if (ActualMonths.Count > 0)
        {
            <RadzenLineSeries Smooth="@smooth" Data="@ActualMonths" CategoryProperty="@nameof(MonthViews.Month)" Title="Актуальные просмотры" ValueProperty="@nameof(MonthViews.Views)">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle"/>
                <RadzenSeriesDataLabels Visible="@showDataLabels"/>
            </RadzenLineSeries>
        }
        @if (MaybeMonths.Count > 0)
        {
            <RadzenLineSeries Smooth="@smooth" Data="@MaybeMonths" CategoryProperty="@nameof(MonthViews.Month)" Title="Прогнозируемые просмотры" LineType="LineType.Dashed" ValueProperty="@nameof(MonthViews.Views)">
                <RadzenMarkers Visible="@showMarkers" Fill="#E00000" MarkerType="MarkerType.Circle"/>
                <RadzenSeriesDataLabels Visible="@showDataLabels"/>
            </RadzenLineSeries>
        }
        <RadzenCategoryAxis Padding="20"/>
        <RadzenValueAxis >
            <RadzenGridLines Visible="true"/>
            <RadzenAxisTitle Text="Просмотры"/>
        </RadzenValueAxis>
    </RadzenChart>
</RadzenStack>

@code {
    bool smooth = false;
    bool sharedTooltip = true;
    bool showDataLabels = false;
    bool showMarkers = true;

    public List<MonthViews> ActualMonths { get; set; } = [];
    public List<MonthViews> MaybeMonths { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var m10ago = DateTime.UtcNow.AddMonths(-10);
        var monthStats = await _db.UserActivityMonthStats
            .Where(x => x.CreatedAt >= m10ago)
            .OrderBy(x => x.CreatedAt)
            .ToListAsync();

        ActualMonths = monthStats.Select(x => new MonthViews(
            Views: x.TotalSiteViews,
            Month: ToRuNormMonth(x.CreatedAt)
        )).ToList();

        if (ActualMonths.Count < 4)
        {
            return;
        }

        var viewsData = ActualMonths.Select(x => (double)x.Views).ToList();
        var movingAverageCalculator = new MovingAverage(viewsData, 3);

        var mdata = movingAverageCalculator.CalculateMovingAverages();

        MaybeMonths = [
            new MonthViews(ActualMonths.Last().Views, ActualMonths.Last().Month)
        ];

        for (int i = 0; i < 2; i++)
        {
            double nextViewCount = movingAverageCalculator.CalculateNextValue(mdata);

            MaybeMonths.Add(new MonthViews(
                Views: (long)nextViewCount,
                Month: ToRuNormMonth(DateTime.UtcNow.AddMonths(i + 1))
            ));

            mdata.Add(nextViewCount);
        }
    }

    public static string ToRuNormMonth(DateTime? dateTime)
    {
        ArgumentNullException.ThrowIfNull(dateTime);
        return dateTime.Value.ToString("MMMM", new CultureInfo("ru-RU"));
    }

    public record MonthViews(
        long Views,
        string Month
    );

}