@page "/categories"
@using System.Reflection.Metadata
@using Microsoft.EntityFrameworkCore
@using StationProject.Components.Dialogs
@using StationProject.Data
@using StationProject.Data.Models
@using StationProject.Services

@inject AppNavigationManager _navigation;
@inject ApplicationDbContext _db;
@inject DialogService DialogService;

<div class="categories-section">
    <h2>Категории</h2>
    <div class="category-chips" style="align-items: center">
        <div class="category-item f-row" style="width: 100px; height: 100px; margin: 10px; border: 1px solid #B0AEAEAE; justify-content: center; align-items: center" @onclick="AddCategory">
            <span style="align-self: center; font-size: 24px; font-weight: bold;">+</span>
        </div>
        @foreach (var category in Categories)
        {
            <div class="f-column gap-10 category-item" style="align-items: center" @onclick="@(() => EditCategory(category))">
                <div class="circle-mask">
                    <img src="@category.Category.ImageUrl" alt="категория"/>
                </div>
                <span style="align-self: center; font-size: 24px; font-weight: bold;">@category.Category.Name</span>
            </div>
        }
    </div>
</div>

<h2>Продукты</h2>
<div class="products-section">
    @foreach (var wrapper in Categories)
    {
        <div class="category-header" @onclick="@(() => ToggleProducts(wrapper))">
            <h3>@wrapper.Category.Name</h3>
            <button class="btn btn-primary" @onclick="@(() => AddProduct(wrapper.Category))" @onclick:stopPropagation="true">Добавить продукт</button>
        </div>

        @if (wrapper.IsExpanded)
        {
            <div class="product-list">
                @foreach (var product in wrapper.Category.Products)
                {
                    <div class="product-card gap-20" style="display: flex; align-items: center;" @onclick="() => EditProduct(wrapper.Category, product)">
                        <img style="width: 100px; height: 100px" src="@(product.Images.FirstOrDefault()?.Url ?? Consts.PlaceholderUrl)" alt="@product.Name"/>
                        <h4>@product.Name</h4>
                        <p>Количество: @product.Count.Count</p>
                        <p>Цена: @product.Price.FormattedPrice</p>
                        <button class="btn btn-danger" @onclick="@(() => DeleteProduct(product))" @onclick:stopPropagation="true">Удалить</button>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    public List<CategoryWrapper> Categories { get; set; } = new();

    private string newCategoryName = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var categories = await _db.Categories
            .Include(x => x.Products).ThenInclude(x => x.Vendor)
            .Include(x => x.Products).ThenInclude(x => x.Images)
            .Include(x => x.Products).ThenInclude(x => x.Count)
            .Include(x => x.Products).ThenInclude(x => x.Price).ThenInclude(x => x.Template)
            .ToListAsync();

        Categories = categories.Select(c => new CategoryWrapper(c)).ToList();
    }

    private async Task AddCategory()
    {
        var newCategory = await DialogService.OpenAsync<AddCategoryDialog>("Добавить новую категорию", new Dictionary<string, object>
        {
            { nameof(AddCategoryDialog.Category), new Category { Name = "", ImageUrl = "" } },
        });

        if (newCategory != null)
        {
            Categories.Add(new CategoryWrapper(newCategory));
            await _db.Categories.AddAsync(newCategory);
            await _db.SaveChangesAsync();
        }
    }

    private async Task EditCategory(CategoryWrapper wrapper)
    {
        var editedCategory = await DialogService.OpenAsync<AddCategoryDialog>("Редактировать категорию", new Dictionary<string, object>
        {
            { nameof(AddCategoryDialog.Category), wrapper.Category },
        });

        if (editedCategory != null)
        {
            wrapper.Category = editedCategory;
            _db.Categories.Update(wrapper.Category);
            await _db.SaveChangesAsync();
        }
    }

    private void ToggleProducts(CategoryWrapper wrapper)
    {
        wrapper.IsExpanded = !wrapper.IsExpanded;
    }

    private async Task AddProduct(Category category)
    {
        var newProductX = new Product()
        {
            Id = Random.Shared.Next(),
            VendorId = (await authenticationStateTask.GetUserIdAsync()).Value,
            Price = new Price() { Value = 999 },
            Images = new List<ProductImage> { new ProductImage() { Url = Consts.PlaceholderUrl } },
            Count = new ProductCount() { Count = 1 },
            Name = "",
            Description = "",
            Characteristics = "",
        };

        var newProduct = await DialogService.OpenAsync<ProductDialog>("Добавить продукт", new Dictionary<string, object>
        {
            { nameof(ProductDialog.Product), newProductX },
            { nameof(ProductDialog.Categories), Categories.Select(x => x.Category).ToList() },
        });

        if (newProduct != null)
        {
            await _db.Products.AddAsync(newProduct);
            await _db.SaveChangesAsync();
        }
    }

    private async Task EditProduct(Category category, Product product)
    {
        var editedProduct = await DialogService.OpenAsync<ProductDialog>("Редактировать продукт", new Dictionary<string, object>
        {
            { nameof(ProductDialog.Product), product },
            { nameof(ProductDialog.Categories), Categories.Select(x => x.Category).ToList() },
        });

        if (editedProduct != null)
        {
            _db.Products.Update(editedProduct);
            await _db.SaveChangesAsync();
        }
    }

    private async Task DeleteProduct(Product product)
    {
        // bool confirmed = await DialogService.Confirm("Вы уверены, что хотите удалить этот продукт?", "Подтверждение удаления", new ConfirmOptions()
        // {
        //     CancelButtonText = "Отменить",
        //     OkButtonText = "Подтвердить",
        //     CssClass = "dialog-b"
        // }) ?? false;
        //
        // if (confirmed)
        // {
        _db.Products.Remove(product);
        await _db.SaveChangesAsync();

        // Optionally, remove the product from the UI list
        foreach (var wrapper in Categories)
        {
            if (wrapper.Category.Products.Contains(product))
            {
                wrapper.Category.Products.Remove(product);
                break;
            }
            // }
        }
    }

}