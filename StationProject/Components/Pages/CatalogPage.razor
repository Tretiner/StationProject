@page "/Products/{CategoryId?}"
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using StationProject.Data
@using StationProject.Data.Models
@using StationProject.Domain
@using StationProject.Services

@inject AppNavigationManager _navigation
@inject ApplicationDbContext _db
@inject UserManager<ApplicationUser> _userManager
@inject ILogger<CatalogPage> Logger

<div class="f-column">
    <div class="fw-row gap-20" style="padding: 20px 60px">

        <div class="f-column gap-1">
            <span class="name-focusing-outlined">Поиск</span>
            <input class="focusing-outlined" style="max-width: 500px;" type="text" placeholder="Введите текст для поиска..."
                   @bind="QueryText" @bind:after="@SetProducts" @bind:event="oninput"/>
        </div>

        <div class="f-column gap-1">
            <span class="name-focusing-outlined">Сортировать</span>
            <select style="flex: 1; background-color: transparent;" class="focusing-outlined" @bind="OrderBy" @bind:after="@SetProducts">
                <option value="@ProductOrder.Default">-</option>
                <option value="@ProductOrder.Name">По имени</option>
                <option value="@ProductOrder.Price">По цене</option>
            </select>
        </div>

        @if (Categories is not null)
        {
            <div class="f-column gap-1">
                <span class="name-focusing-outlined">Категории</span>
                <div class="f-row gap-10x">
                    @{
                        var categoryId = CategoryId is not null ? int.Parse(CategoryId) : 0;
                    }
                    @foreach (var category in Categories)
                    {
                        if (category.Id == categoryId)
                        {
                            <div class="category-circle-selected" @onclick="() => _navigation.NavigateToProducts()" @onclick:stopPropagation="true">
                                @category.Name
                            </div>
                        }
                        else
                        {
                            <div class="category-circle" @onclick="() => _navigation.NavigateToProducts(category.Id)" @onclick:stopPropagation="true">
                                @category.Name
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    @if (ProductList.Count != 0)
    {
        <div class="fw-row gap-20" style="padding: 20px 60px">
            @foreach (var product in ProductList)
            {
                <div class="f-column" style="flex: 1 1 300px; min-width: 230px; width: 290px;" @onclick="() => _navigation.NavigateToFullInfo(product.Id)">
                    <img src="@product.ImageUrl" style="width: 100%; height: auto;">

                    <div class="f-column">
                        <div class="f-column" style="padding: 10px">
                            <span style="font-size: 24px; height: 50px; color: #000000">@product.Name</span>
                            <div class="f-row" style="align-items: center">
                                <span style="flex: 1; font-size: 20px; text-align: start; color: #8FA5AE">@product.VendorName</span>

                                <div style="height: 13px; width: 1px; background-color: #8FA5AE;"></div>

                                <span style="flex: 1; font-size: 28px; font-weight: bold; text-align: end;">@product.Price</span>
                            </div>
                        </div>

                        <div class="f-row gap-10">
                            @if (product.IsAddedToCart)
                            {
                                <button class="outlined" style="flex: 1; background-color: #039855; border-color: #00a85d; color: white" @onclick="() => _navigation.NavigateToCart()" @onclick:stopPropagation="true">Добавлено!</button>
                            }
                            else
                            {
                                <button class="outlined" style="flex: 1;" @onclick="async () => await AddOrIncrementToCart(product)" @onclick:stopPropagation="true">В корзину</button>
                            }
                            <button class="primary" style="flex: 1;" @onclick="() => _navigation.NavigateToFastItemOrder(product.Id)" @onclick:stopPropagation="true">Купить</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <span>Ничего не выставлено на продажу!</span>
    }
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    [Parameter]
    public string? CategoryId { get; set; }

    public List<Category>? Categories { get; set; }

    public string QueryText = "";
    public ProductOrder OrderBy = ProductOrder.Default;

    public async Task AddOrIncrementToCart(ProductShortInfo product)
    {
        if (!product.IsAddedToCart)
        {
            product.IsAddedToCart = true;
            await AddOrIncrementKorzinaItem(product.Id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await SetProducts();
    }

    private async Task SetProducts()
    {
        IQueryable<Product> dbRequest;

        Categories = await _db.Categories.ToListAsync();

        if (CategoryId is null)
        {
            dbRequest = _db.Products
                .Include(x => x.Vendor)
                .Include(x => x.Category)
                .Include(x => x.Images)
                .Include(x => x.Price).ThenInclude(x => x.Template);
        }
        else
        {
            var categoryId = int.Parse(CategoryId);
            dbRequest = _db.Categories
                .Include(x => x.Products).ThenInclude(x => x.Vendor)
                .Include(x => x.Products).ThenInclude(x => x.Category)
                .Include(x => x.Products).ThenInclude(x => x.Images)
                .Include(x => x.Products).ThenInclude(x => x.Price).ThenInclude(x => x.Template)
                .Where(x => x.Id == categoryId)
                .SelectMany(x => x.Products);
        }

        dbRequest = OrderBy switch
        {
            ProductOrder.Name => dbRequest.OrderBy(x => x.Name),
            ProductOrder.Price => dbRequest.OrderBy(x => x.Price),
            _ => dbRequest,
        };

        IEnumerable<Product> products = await dbRequest.ToListAsync();

        var words = QueryText.Split();
        if (words.Length > 0)
        {
            products = products.Where(x => words.Any(w => x.Name.Contains(w, StringComparison.InvariantCultureIgnoreCase)));
        }

        ProductList = products.Select(Map).ToList();
    }

    private static ProductShortInfo Map(Product product) => new()
    {
        Id = product.Id,
        ImageUrl = product.Images.First().Url,
        Name = product.Name,
        VendorName = product.Vendor.UserName,
        Price = product.Price.FormattedPrice,
        IsAddedToCart = false,
    };

    public List<ProductShortInfo> ProductList { get; set; } = [];

    private async Task AddOrIncrementKorzinaItem(int productId)
    {
        var existingItem = await _db.Cart
            .FirstOrDefaultAsync(x => x.ProductId == productId);

        if (existingItem is not null)
        {
            existingItem.Count++;
            _db.Cart.Update(existingItem);
            Logger.LogInformation($"Updated item: {existingItem.Id}");
        }
        else
        {
            var userId = await authenticationStateTask.GetUserIdAsync();

            if (userId is null)
            {
                return;
            }

            var newItem = new CartItem
            {
                Product = await _db.Products.FirstAsync(x => x.Id == productId),
                Count = 1,
                UserId = userId.Value
            };

            await _db.Cart.AddAsync(newItem);
            Logger.LogInformation($"Added item: {newItem.Product.Name} {newItem.Id}");
        }

        await _db.SaveChangesAsync();
    }

}