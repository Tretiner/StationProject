@page "/product-dialog"
@using StationProject.Data
@using StationProject.Data.Models
@using StationProject.Services
@inject ApplicationDbContext _db;
@inject DialogService DialogService;

<EditForm Model="@Product" OnValidSubmit="@SaveProduct">
    <DataAnnotationsValidator/>

    <RadzenTextBox Name="Name" @bind-Value="@Product.Name" Placeholder="Название продукта"/>
    <RadzenNumeric Name="TotalCount" @bind-Value="@Product.Count" Placeholder="Количество на складе"/>
    <RadzenNumeric Name="Price" @bind-Value="@Product.Price" Placeholder="Цена продукта"/>
    <RadzenTextBox Name="Description" @bind-Value="@Product.Description" Placeholder="Описание продукта"/>

    <RadzenDropDown Data="@Categories" TextProperty="Name" ValueProperty="Id"
                    @bind-Value="@Product.CategoryId" Placeholder="Выберите категорию"/>

    <RadzenButton ButtonType="ButtonType.Submit" Text="Сохранить"/>
</EditForm>

@code {
    [Parameter] public Product Product { get; set; }
    [Parameter] public List<Category> Categories { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    private bool isVisible;

    protected override void OnParametersSet()
    {
        isVisible = true;
    }

    private async Task SaveProduct()
    {
        if (Product.Id == 0) // New product
        {
            var userId = await authenticationStateTask.GetUserIdAsync();

            if (userId is null)
            {
                return;
            }

            Product.VendorId = userId.Value;
            _db.Products.Add(Product);
        }
        else // Update existing product
        {
            var existingProduct = await _db.Products.FindAsync(Product.Id);
            if (existingProduct != null)
            {
                existingProduct.Name = Product.Name;
                // existingProduct.TotalCount = Product.TotalCount;
                existingProduct.Price = Product.Price;
                // existingProduct.PriceTemplate = Product.PriceTemplate;
                existingProduct.Description = Product.Description;
                existingProduct.CategoryId = Product.CategoryId;
            }
        }
        
        await _db.SaveChangesAsync();
        Close();
    }

    private void Close()
    {
        DialogService.Close(); // Close dialog without returning any result
    }
}